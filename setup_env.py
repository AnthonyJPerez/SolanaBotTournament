#!/usr/bin/env python3
"""
Setup script for Solana Bot Tournament environment configuration.
Helps users configure their .env file with proper API keys.
"""
import os
import shutil
from pathlib import Path


def setup_environment():
    """Interactive setup for environment variables."""
    print("Solana Bot Tournament - Environment Setup")
    print("=" * 50)
    
    env_file = Path(".env")
    env_example = Path(".env.example")
    
    # Copy .env.example to .env if it doesn't exist
    if not env_file.exists():
        if env_example.exists():
            shutil.copy(env_example, env_file)
            print("[OK] Created .env file from template")
        else:
            print("[ERROR] .env.example not found!")
            return False
    else:
        print("[WARNING] .env file already exists")
        overwrite = input("Do you want to reconfigure it? (y/N): ").lower().strip()
        if overwrite != 'y':
            print("Setup cancelled.")
            return False
    
    print("\nLet's configure your API keys:")
    print("You can skip any optional services by pressing Enter\n")
    
    # Configuration prompts
    configs = []
    
    # Required: Helius API
    print("HELIUS API (REQUIRED)")
    print("Get your API key from: https://www.helius.dev/")
    helius_key = input("Enter your Helius API key: ").strip()
    if helius_key:
        configs.append(f"HELIUS_API_KEY={helius_key}")
    else:
        print("[WARNING] Without Helius API key, only mock mode will work")
        configs.append("HELIUS_API_KEY=")
    
    # Optional: Telegram
    print("\nTELEGRAM ALERTS (Optional)")
    print("Create bot: https://core.telegram.org/bots#botfather")
    tg_token = input("Enter Telegram bot token (or press Enter to skip): ").strip()
    if tg_token:
        tg_chat = input("Enter Telegram chat ID: ").strip()
        configs.append(f"TELEGRAM_BOT_TOKEN={tg_token}")
        configs.append(f"TELEGRAM_CHAT_ID={tg_chat}")
    else:
        print("[INFO] Skipping Telegram configuration")
        configs.append("TELEGRAM_BOT_TOKEN=")
        configs.append("TELEGRAM_CHAT_ID=")
    
    # Optional: Twitter
    print("\nTWITTER POSTING (Optional)")
    print("Get API keys from: https://developer.twitter.com/")
    twitter_key = input("Enter Twitter API key (or press Enter to skip): ").strip()
    if twitter_key:
        twitter_secret = input("Enter Twitter API secret: ").strip()
        twitter_token = input("Enter Twitter access token: ").strip()
        twitter_token_secret = input("Enter Twitter access token secret: ").strip()
        
        configs.extend([
            f"TWITTER_API_KEY={twitter_key}",
            f"TWITTER_API_SECRET={twitter_secret}",
            f"TWITTER_ACCESS_TOKEN={twitter_token}",
            f"TWITTER_ACCESS_SECRET={twitter_token_secret}"
        ])
    else:
        print("[INFO] Skipping Twitter configuration")
        configs.extend([
            "TWITTER_API_KEY=",
            "TWITTER_API_SECRET=",
            "TWITTER_ACCESS_TOKEN=",
            "TWITTER_ACCESS_SECRET="
        ])
    
    # Write configuration
    with open(env_file, 'w') as f:
        f.write("# Solana Bot Tournament - Environment Configuration\n")
        f.write("# Generated by setup_env.py\n\n")
        for config in configs:
            f.write(f"{config}\n")
    
    print(f"\n[OK] Configuration saved to {env_file}")
    print("\nNext steps:")
    print("1. Run: pip install -e .")
    print("2. Test: python -m solana_bot_tournament.cli daily")
    print("3. Dashboard: python -m solana_bot_tournament.cli dashboard")
    
    return True


def validate_environment():
    """Validate current environment configuration."""
    print("Validating environment configuration...")
    
    env_file = Path(".env")
    if not env_file.exists():
        print("[ERROR] .env file not found. Run setup first.")
        return False
    
    # Load environment variables
    env_vars = {}
    with open(env_file) as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                env_vars[key] = value
    
    # Check required variables
    issues = []
    
    helius_key = env_vars.get('HELIUS_API_KEY', '')
    if not helius_key or helius_key.startswith('your_'):
        issues.append("[WARNING] HELIUS_API_KEY not configured (required for real data)")
    else:
        print("[OK] Helius API key configured")
    
    # Check optional but related variables
    tg_token = env_vars.get('TELEGRAM_BOT_TOKEN', '')
    tg_chat = env_vars.get('TELEGRAM_CHAT_ID', '')
    if tg_token and not tg_chat:
        issues.append("[WARNING] Telegram token provided but chat ID missing")
    elif tg_token and tg_chat:
        print("[OK] Telegram alerts configured")
    
    twitter_keys = [
        env_vars.get('TWITTER_API_KEY', ''),
        env_vars.get('TWITTER_API_SECRET', ''),
        env_vars.get('TWITTER_ACCESS_TOKEN', ''),
        env_vars.get('TWITTER_ACCESS_SECRET', '')
    ]
    if any(twitter_keys) and not all(twitter_keys):
        issues.append("[WARNING] Incomplete Twitter configuration (need all 4 keys)")
    elif all(twitter_keys):
        print("[OK] Twitter posting configured")
    
    if issues:
        print("\n[WARNING] Configuration issues found:")
        for issue in issues:
            print(f"   {issue}")
        return False
    
    print("\n[OK] Environment configuration looks good!")
    return True


if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == "validate":
        validate_environment()
    else:
        setup_environment()